(define (lisp-interpreter lst)
    (function-definition lst 0)
)

(define (function-definition lst i)
  (let (element (nth i lst))
       (cond
       		((= element '+)
        		(addition lst i))
            ((= element '-)
                (subtraction lst i))
            ((= element '*)
                (multiplication lst i))
            ((= element '/)
                (division lst i))
        	((= element 'first)
                (my-first lst i))
        	((= element 'rest)
                (my-rest lst i))
        	((= element 'cons)
                (my-cons lst i))
        	((= element 'string)
                (my-string lst i))
        	(true lst)
       )
  )
)

(define (addition lst i)
  (let (n (+ i 1))
     (if (< n (length lst))
        (if (number? (nth n lst))
            (+ (nth n lst) (addition lst n))
            (+ (function-definition (nth n lst) 0) (addition lst n))
        )
        0
     )
  )
)

(define (subtraction lst i)
  (let (n (+ i 1))
     (if (< n (length lst))
        (if (number? (nth n lst))
            (- (nth n lst) (subtraction lst n))
            (- (function-definition (nth n lst) 0) (subtraction lst n))
        )
        0
     )
  )
)

(define (multiplication lst i)
  (let (n (+ i 1))
     (if (< n (length lst))
        (if (number? (nth n lst))
            (* (nth n lst) (multiplication lst n))
            (* (function-definition (nth n lst) 0) (multiplication lst n))
        )
        1 
     )
  )
)

(define (division lst i)
  (let (n (+ i 1))
     (if (< n (length lst))
        (if (number? (nth n lst))
            (/ (nth n lst) (division lst n))
            (/ (function-definition (nth n lst) 0) (division lst n))
        )
        1
     )
  )
)

(define (my-first lst i)
	(let (n (+ i 1))
      (if (list? (first(nth n lst)))
          (function-definition (first(nth n lst)) 0)
          (first (function-definition (nth n lst)0))
       )  
	)
)


(define (check-lst lst i)
  (if (< i (length lst)) 
      (if (list? (nth i lst))
       (cons (function-definition (nth i lst) 0)(check-lst lst (+ i 1)))
       (cons (nth i lst) (check-lst lst (+ i 1))) 
      )
  )
)

(define (my-rest lst i)
  (let (n (+ i 1) )
      (chop (check-lst (rest (nth n lst))0))
  )
)

(define (my-cons lst i)
  (let (n (+ i 1) )
      (chop (check-lst lst n))
  )    
)


(define (my-string lst i)
  (let (n (+ i 1))
       (if (< n (length lst))
          (if (atom? (nth n lst))
              (string (nth n lst) (my-string lst n))
              (string (function-definition (nth n lst) 0) (my-string lst n))
          )
          ""
       )
  )
)

(lisp-interpreter '(+ (+ 1 2)(+ 12 8)))
(lisp-interpreter '(- (+ 18 2)(- 12 8)))
(lisp-interpreter '(* (* 2 2)(* 10 2)))
(lisp-interpreter '(/ (/ 30 5)(/ 6 2)))
(lisp-interpreter '(- (+ (/ 25 5)(* 6 2))(* 3 2)))
(lisp-interpreter '(first (15 2 3 4)))
(lisp-interpreter '(rest (15 2 3 4)))
(lisp-interpreter '(cons a 15 1))
(lisp-interpreter '(first (rest (13 4 2 6 3))))
(lisp-interpreter '(string "Hello, " "world!"))